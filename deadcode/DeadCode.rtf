{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red252\green93\blue186;\red30\green31\blue41;\red246\green246\blue239;
\red174\green122\blue247;\red124\green228\blue252;\red72\green255\blue104;\red228\green242\blue113;\red238\green252\blue122;
\red80\green93\blue147;\red0\green0\blue0;\red253\green170\blue90;\red246\green246\blue239;\red30\green31\blue41;
\red80\green93\blue147;\red252\green93\blue186;\red174\green122\blue247;\red228\green242\blue113;\red238\green252\blue122;
\red72\green255\blue104;\red253\green170\blue90;}
{\*\expandedcolortbl;;\cssrgb\c100000\c47451\c77647;\cssrgb\c15686\c16471\c21176;\cssrgb\c97255\c97255\c94902;
\cssrgb\c74118\c57647\c97647;\cssrgb\c54510\c91373\c99216;\cssrgb\c31373\c98039\c48235;\cssrgb\c91373\c94902\c51765;\cssrgb\c94510\c98039\c54902;
\cssrgb\c38431\c44706\c64314;\cssrgb\c0\c0\c0;\cssrgb\c100000\c72157\c42353;\cssrgb\c97255\c97255\c94902;\cssrgb\c15686\c16471\c21176;
\cssrgb\c38431\c44706\c64314;\cssrgb\c100000\c47451\c77647;\cssrgb\c74118\c57647\c97647;\cssrgb\c91373\c94902\c51765;\cssrgb\c94510\c98039\c54902;
\cssrgb\c31373\c98039\c48235;\cssrgb\c100000\c72157\c42353;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23820\viewh14140\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
const\cf4  \cf5 styles\cf4  \cf2 =\cf4  
\f1\i \cf6 StyleSheet
\f0\i0 \cf4 .\cf7 create\cf4 (\{\cb1 \
\cb3   container\cf2 :\cf4  \{\cb1 \
\cb3     flex\cf2 :\cf4  \cf5 1\cf4 ,\cb1 \
\cb3     alignItems\cf2 :\cf4  \cf8 '\cf9 center\cf8 '\cf4 ,\cb1 \
\cb3     justifyContent\cf2 :\cf4  \cf8 '\cf9 center\cf8 '\cf4 ,\cb1 \
\cb3   \},\cb1 \
\cb3   mainColor\cf2 :\cf4  \{\cb1 \
\cb3     backgroundColor\cf2 :\cf4  \cf8 '\cf9 white\cf8 '\cf4 ,\cb1 \
\cb3   \},\cb1 \
\cb3   helloColor\cf2 :\cf4  \{\cb1 \
\cb3     backgroundColor\cf2 :\cf4  \cf8 '\cf9 #2aa198\cf8 '\cf4 ,\cb1 \
\cb3   \},\cb1 \
\cb3   entries\cf2 :\cf4  \{\cb1 \
\cb3     marginBottom\cf2 :\cf4  \cf5 20\cf4 ,\cb1 \
\cb3   \},\cb1 \
\cb3   entryContainer\cf2 :\cf4  \{\cb1 \
\cb3     marginBottom\cf2 :\cf4  \cf5 20\cf4 ,\cb1 \
\cb3   \},\cb1 \
\cb3   entry\cf2 :\cf4  \{\cb1 \
\cb3     color\cf2 :\cf4  \cf8 '\cf9 green\cf8 '\cf4 ,\cb1 \
\cb3     marginBottom\cf2 :\cf4  \cf5 7\cf4 ,\cb1 \
\cb3   \}\cb1 \
\cb3 \});\cb1 \
\
\
\
\cf2 \cb3 \{\cf10 /* <Text style=\{styles.title\}>Form</Text>\cf4 \cb1 \
\cf10 \cb3         <View style=\{styles.item\}>\cf4 \cb1 \
\cf10 \cb3           <TextInput\cf4 \cb1 \
\cf10 \cb3             placeholder="item"\cf4 \cb1 \
\cf10 \cb3             onChangeText=\{(e) => \{\cf4 \cb1 \
\cf10 \cb3               handleChange(e, setItem);\cf4 \cb1 \
\cf10 \cb3             \}\}\cf4 \cb1 \
\cf10 \cb3             value=\{item\}\cf4 \cb1 \
\cf10 \cb3           />\cf4 \cb1 \
\cf10 \cb3         </View> */\cf2 \}\cf4 \cb1 \
\
\cb3         \cf2 \{\cf10 /* <TextInput\cf4 \cb1 \
\cf10 \cb3           placeholder="category"\cf4 \cb1 \
\cf10 \cb3           onChangeText=\{(text) => setCategory(text)\}\cf4 \cb1 \
\cf10 \cb3           value=\{category\}\cf4 \cb1 \
\cf10 \cb3         />\cf4 \cb1 \
\cf10 \cb3         <TextInput\cf4 \cb1 \
\cf10 \cb3           placeholder="description"\cf4 \cb1 \
\cf10 \cb3           onChangeText=\{(text) => setDescription(text)\}\cf4 \cb1 \
\cf10 \cb3           value=\{description\}\cf4 \cb1 \
\cf10 \cb3         />\cf4 \cb1 \
\cf10 \cb3         <TextInput\cf4 \cb1 \
\cf10 \cb3           placeholder="payment"\cf4 \cb1 \
\cf10 \cb3           onChangeText=\{(text) => setPayment(text)\}\cf4 \cb1 \
\cf10 \cb3           value=\{payment\}\cf4 \cb1 \
\cf10 \cb3         />\cf4 \cb1 \
\cf10 \cb3         <TextInput\cf4 \cb1 \
\cf10 \cb3           placeholder="amount"\cf4 \cb1 \
\cf10 \cb3           onChangeText=\{(text) => setAmount(text)\}\cf4 \cb1 \
\cf10 \cb3           value=\{amount\}\cf4 \cb1 \
\cf10 \cb3         /> */\cf2 \}\cf4 \cb1 \
\
\cb3  \cf2 \{\cf10 /* <Button\cf4 \cb1 \
\cf10 \cb3           onPress=\{() => \{\cf4 \cb1 \
\cf10 \cb3             \{ handleSubmit(); \}\cf4 \cb1 \
\cf10 \cb3             \{ Keyboard.dismiss(); \}\cf4 \cb1 \
\cf10 \cb3           \}\}\cf4 \cb1 \
\cf10 \cb3           title="Submit"\cf4 \cb1 \
\cf10 \cb3         /> */\cf2 \}\cf4 \cb1 \
\
\
\cb3       \cf2 \{\cf10 /* <Text style=\{styles.entries\}>Entries</Text> */\cf2 \}\cf4 \cb1 \
\
\cb3   \cf10 // const objCleaner = (obj) => \{\cf4 \cb1 \
\cb3   \cf10 //   for (let key in obj) \{\cf4 \cb1 \
\cb3   \cf10 //     if (obj[key] === "") \{\cf4 \cb1 \
\cb3   \cf10 //       delete obj[key];\cf4 \cb1 \
\cb3   \cf10 //     \}\cf4 \cb1 \
\cb3   \cf10 //   \}\cf4 \cb1 \
\cb3   \cf10 //   return obj;\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b \cf11 OLD FORM \
\
\pard\pardeftab720\sl360\partightenfactor0

\f0\b0 \cf2 \cb3 import\cf4  Form \cf2 from\cf4  \cf8 '\cf9 ./components/form/Form\cf8 '\cf4 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\b \cf11 \
\pard\pardeftab720\sl360\partightenfactor0

\f0\b0 \cf2 \cb3 \{\cf10 /* <Form postOne=\{postOne\} /> */\cf2 \}\cf4 \cb1 \
\
\
\cb3 \{\cf10 /* <TouchableWithoutFeedback onPress=\{() => Keyboard.dismiss()\}>\cf4 \cb1 \
\cf10 \cb3 <SafeAreaView style=\{styles.safeArea\}>\cf4 \cb1 \
\cf10 \cb3   <View style=\{[styles.container, styles.helloColor]\}>\cf4 \cb1 \
\cf10 \cb3     <Text style=\{styles.text\}>Hello Lucas 
\f3 \uc0\u55357 \u56834 
\f0 </Text>\cf4 \cb1 \
\cf10 \cb3   </View>\cf4 \cb1 \
\cf10 \cb3 </SafeAreaView>\cf4 \cb1 \
\cf10 \cb3 </TouchableWithoutFeedback> */\cf4 \}\cb1 \
\
\
\cb3 \{\cf10 /* <Form form=\{config.loginForm\} postOne=\{postOne\} /> */\cf4  \}\cb1 \
\
\cb3 \{\cf10 /* <View>\cf4 \cb1 \
\cf10 \cb3 <Entries entries=\{entries\} deleteOne=\{deleteOne\} />\cf4 \cb1 \
\cf10 \cb3 </View> */\cf4 \}\cb1 \
\
\
\cb3   \cf10 // const deleteOne = (id) => \{\cf4 \cb1 \
\cb3   \cf10 //   ApiService.deleteOne(id)\cf4 \cb1 \
\cb3   \cf10 //     .then(() => \{\cf4 \cb1 \
\cb3   \cf10 //       setEntries((entrList) => \{\cf4 \cb1 \
\cb3   \cf10 //         return entrList.filter((el) => \{\cf4 \cb1 \
\cb3   \cf10 //           return el.id !== id;\cf4 \cb1 \
\cb3   \cf10 //         \});\cf4 \cb1 \
\cb3   \cf10 //       \});\cf4 \cb1 \
\cb3   \cf10 //     \});\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3  \cf10 // const dataParser = (arr) => \{\cf4 \cb1 \
\cb3   \cf10 //   const obj = \{\};\cf4 \cb1 \
\cb3   \cf10 //   arr.forEach((el) => \{\cf4 \cb1 \
\cb3   \cf10 //     if (el.value !== '') \{\cf4 \cb1 \
\cb3   \cf10 //       obj[el.name] = el.value;\cf4 \cb1 \
\cb3   \cf10 //     \}\cf4 \cb1 \
\cb3   \cf10 //   \});\cf4 \cb1 \
\cb3   \cf10 //   return obj;\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3   \cf10 // const postOne = (arr) => \{\cf4 \cb1 \
\cb3   \cf10 //   const cleanedObj = dataParser(arr);\cf4 \cb1 \
\cb3   \cf10 //   ApiService.postOne(cleanedObj)\cf4 \cb1 \
\cb3   \cf10 //     .then((data) => \{\cf4 \cb1 \
\cb3   \cf10 //       setEntries([...entries, data]);\cf4 \cb1 \
\cb3   \cf10 //     \});\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3   \cf10 // const filterList = (e) => \{\cf4 \cb1 \
\cb3   \cf10 //   console.log('e-->', e);\cf4 \cb1 \
\cb3   \cf10 //   const res = entries.filter((el) => \{\cf4 \cb1 \
\cb3   \cf10 //     return el.item.includes(e[0].value);\cf4 \cb1 \
\cb3   \cf10 //   \});\cf4 \cb1 \
\cb3   \cf10 //   setSearch(res);\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cf5 \cb3 searchForm\cf4 .\cf6 map\cf4 ((
\f1\i \cf12 field
\f0\i0 \cf4 ) \cf2 =>\cf4  (\{\cb1 \
\cb3       name\cf2 :\cf4  
\f1\i \cf12 field
\f0\i0 \cf4 .label,\cb1 \
\cb3       value\cf2 :\cf4  \cf8 ''\cf4 \cb1 \
\cb3     \}))\cb1 \
\
\cb3  \cf2 \{\cf10 /* \{ console.log('search.length-->', search.length),\cf4 \cb1 \
\
\cf10 \cb3         search[0].value !== '' ? <Entries entries=\{search\} deleteOne=\{deleteOne\} /> : <></>\cf4 \cb1 \
\cf10 \cb3       \} */\cf2 \}\cf4 \cb1 \
\
\
\cb3   \cf7 filterHelper\cf2 :\cf4  (
\f1\i \cf12 e
\f0\i0 \cf4 , 
\f1\i \cf12 arr
\f0\i0 \cf4 , 
\f1\i \cf12 cb
\f0\i0 \cf4 , 
\f1\i \cf12 target
\f0\i0 \cf4 , 
\f1\i \cf12 field
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3       \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 e-->\cf8 '\cf4 , 
\f1\i \cf12 e
\f0\i0 \cf4 );\cb1 \
\cb3       \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 arr-->\cf8 '\cf4 , 
\f1\i \cf12 arr
\f0\i0 \cf4 );\cb1 \
\cb3       \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 target-->\cf8 '\cf4 , 
\f1\i \cf12 target
\f0\i0 \cf4 );\cb1 \
\cb3       \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 field-->\cf8 '\cf4 , 
\f1\i \cf12 field
\f0\i0 \cf4 );\cb1 \
\
\cb3       \cf10 // store the values in the array \cf4 \cb1 \
\
\cb3       \cf10 // store description, price, date\cf4 \cb1 \
\cb3       \cf10 // in the filter check all of them\cf4 \cb1 \
\cb3         \cf10 // if (el[description].includes && el[amount].includes && el[date])\cf4 \cb1 \
\cb3         \cf10 // return the value\cf4 \cb1 \
\
\
\cb3       \cf2 const\cf4  \cf5 ind\cf4  \cf2 =\cf4  
\f1\i \cf12 e
\f0\i0 \cf4 .\cf7 findIndex\cf4 (
\f1\i \cf12 el
\f0\i0 \cf4  \cf2 =>\cf4  
\f1\i \cf12 el
\f0\i0 \cf4 .name \cf2 ===\cf4  
\f1\i \cf12 target
\f0\i0 \cf4 );\cb1 \
\cb3       \cf2 const\cf4  \cf5 res\cf4  \cf2 =\cf4  
\f1\i \cf12 arr
\f0\i0 \cf4 .\cf7 filter\cf4 ((
\f1\i \cf12 el
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3         \cf2 if\cf4  (
\f1\i \cf12 el
\f0\i0 \cf4 [
\f1\i \cf12 field
\f0\i0 \cf4 ]) \{\cb1 \
\cb3           \cf10 // return el[field] === e[ind].value;\cf4 \cb1 \
\cb3           \cf2 return\cf4  
\f1\i \cf12 el
\f0\i0 \cf4 [
\f1\i \cf12 field
\f0\i0 \cf4 ].\cf7 includes\cf4 (
\f1\i \cf12 e
\f0\i0 \cf4 [\cf5 ind\cf4 ].value);\cb1 \
\cb3         \}\cb1 \
\cb3       \});\cb1 \
\cb3       \cf7 cb\cf4 (\cf5 res\cf4 );\cb1 \
\cb3     \},\cb1 \
\
\cb3   \cf10 // const handleChange = (text, target) => \{\cf4 \cb1 \
\cb3   \cf10 //   if (flagCheck(form)) \{\cf4 \cb1 \
\cb3   \cf10 //     const field = newFields(text, target, fields);\cf4 \cb1 \
\cb3   \cf10 //     setFields(field);\cf4 \cb1 \
\cb3   \cf10 //   \} else \{\cf4 \cb1 \
\cb3   \cf10 //     const field = newFields(text, target, fields);\cf4 \cb1 \
\cb3   \cf10 //     setFields(field);\cf4 \cb1 \
\cb3   \cf10 //     filterList(fields, target);\cf4 \cb1 \
\cb3   \cf10 //   \}\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3   \cf10 // const handleSubmit = (e) => \{\cf4 \cb1 \
\cb3   \cf10 //   e.preventDefault();\cf4 \cb1 \
\cb3   \cf10 //   const check = emptyFieldCheck(fields);\cf4 \cb1 \
\cb3   \cf10 //   if (!check) \{\cf4 \cb1 \
\cb3   \cf10 //     fields[5].value = date;\cf4 \cb1 \
\cb3   \cf10 //     postOne(fields);\cf4 \cb1 \
\cb3   \cf10 //     const field = resetField(fields);\cf4 \cb1 \
\cb3   \cf10 //     setFields(field);\cf4 \cb1 \
\cb3   \cf10 //   \} else \{\cf4 \cb1 \
\cb3   \cf10 //     Alert.alert('Please enter both input and amount');\cf4 \cb1 \
\cb3   \cf10 //   \}\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\
\cb3   \cf10 // const totalSum = (filter, arr) => \{\cf4 \cb1 \
\cb3   \cf10 //   return arr.reduce((pv, cv) => \{\cf4 \cb1 \
\cb3   \cf10 //     return Number(cv[filter]) + Number(pv[filter]);\cf4 \cb1 \
\cb3   \cf10 //   \});\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3   \cf10 // const horizontalAnalysis = (arr, item, type) => \{\cf4 \cb1 \
\cb3   \cf10 //   return totalSum(item, arr);\cf4 \cb1 \
\cb3   \cf10 // \};\cf4 \cb1 \
\
\cb3   \cf2 const\cf4  \cf7 onValPickerChange\cf4  \cf2 =\cf4  (
\f1\i \cf12 el
\f0\i0 \cf4 , 
\f1\i \cf12 cb
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3     \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 el-->\cf8 '\cf4 , 
\f1\i \cf12 el
\f0\i0 \cf4 );\cb1 \
\cb3     \cf5 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 cb-->\cf8 '\cf4 , 
\f1\i \cf12 cb
\f0\i0 \cf4 );\cb1 \
\cb3     \cf7 cb\cf4 (
\f1\i \cf12 el
\f0\i0 \cf4 );\cb1 \
\cb3     \cf10 // console.log('selectedValue-->', selectedValue);\cf4 \cb1 \
\cb3     \cf10 // call method that renders based on item and type of analysys\cf4 \cb1 \
\cb3   \};\cb1 \
\
\cf10 \cb3 // const [renderC, setRenderC] = useState(false);\cf4 \cb1 \
\
\cb3     \cf2 const\cf4  \cf5 args\cf4  \cf2 =\cf4  
\f1\i \cf6 Array
\f0\i0 \cf4 .\cf5 prototype\cf4 .\cf6 slice\cf4 .\cf6 call\cf4 (
\f1\i \cf5 arguments
\f0\i0 \cf4 , \cf5 2\cf4 );\cb1 \
\
\cb3   \cf2 return\cf4  
\f1\i \cf12 arr
\f0\i0 \cf4 .\cf7 reduce\cf4 ((
\f1\i \cf12 pv
\f0\i0 \cf4 , 
\f1\i \cf12 cv
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3         \cf2 return\cf4  
\f1\i \cf6 Number
\f0\i0 \cf4 (
\f1\i \cf12 cv
\f0\i0 \cf4 [
\f1\i \cf12 filter
\f0\i0 \cf4 ]) \cf2 +\cf4  
\f1\i \cf6 Number
\f0\i0 \cf4 (
\f1\i \cf12 pv
\f0\i0 \cf4 [
\f1\i \cf12 filter
\f0\i0 \cf4 ]);\cb1 \
\cb3       \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3   \cf10 // const [selectedValue, setSelectedValue] = useState(getLabels(entries[0])[0]);\cf4 \cb1 \
\
  // const [secondFilter, setSecondFilter] = useState('');\
\
  // const [thirdFilter, setThirdFilter] = useState('');\
\
\cb3   \cf2 const\cf4  \cf5 analysisTypes\cf4  \cf2 =\cf4  \{\cb1 \
\cb3     \cf7 horizontal\cf2 :\cf4  () \cf2 =>\cf4  \{\cb1 \
\
\cb3     \},\cb1 \
\cb3     \cf7 trend\cf2 :\cf4  () \cf2 =>\cf4  \{\cb1 \
\
\cb3     \},\cb1 \
\cb3     \cf7 commonsize\cf2 :\cf4  () \cf2 =>\cf4  \{\cb1 \
\
\cb3     \},\cb1 \
\cb3     \cf7 totalsum\cf2 :\cf4  (
\f1\i \cf12 arr
\f0\i0 \cf4 , 
\f1\i \cf12 firstFil
\f0\i0 \cf4 , 
\f1\i \cf12 secFil
\f0\i0 \cf4 , 
\f1\i \cf12 thirdFil
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3       \cf2 const\cf4  \cf5 filteredList\cf4  \cf2 =\cf4  \cf7 filterBySub\cf4 (
\f1\i \cf12 arr
\f0\i0 \cf4 , 
\f1\i \cf12 secFil
\f0\i0 \cf4 , 
\f1\i \cf12 thirdFil
\f0\i0 \cf4 );\cb1 \
\cb3       \cf2 if\cf4  (\cf5 filteredList\cf4 .length \cf2 ===\cf4  \cf5 1\cf4 ) \{\cb1 \
\cb3         \cf2 return\cf4  \cf5 filteredList\cf4 [\cf5 0\cf4 ][
\f1\i \cf12 firstFil
\f0\i0 \cf4 ];\cb1 \
\cb3       \} \cf2 else\cf4  \{\cb1 \
\cb3         \cf2 return\cf4  \cf5 filteredList\cf4 .\cf7 reduce\cf4 ((
\f1\i \cf12 pv
\f0\i0 \cf4 , 
\f1\i \cf12 cv
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3           \cf2 return\cf4  
\f1\i \cf12 pv
\f0\i0 \cf4  \cf2 +\cf4  
\f1\i \cf6 Number
\f0\i0 \cf4 (
\f1\i \cf12 cv
\f0\i0 \cf4 [
\f1\i \cf12 firstFil
\f0\i0 \cf4 ]);\cb1 \
\cb3         \}, \cf5 0\cf4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \},\cb1 \
\cb3     \cf7 percentageovertot\cf2 :\cf4  (
\f1\i \cf12 filter
\f0\i0 \cf4 , 
\f1\i \cf12 arr
\f0\i0 \cf4 , 
\f1\i \cf12 selFil
\f0\i0 \cf4 , 
\f1\i \cf12 selSubFil
\f0\i0 \cf4 ) \cf2 =>\cf4  \{\cb1 \
\cb3     \},\cb1 \
\cb3     \cf7 sumcategor\cf2 :\cf4  () \cf2 =>\cf4  \{\cb1 \
\
\cb3     \},\cb1 \
\cb3   \};\cb1 \
\
\cb3 <
\f1\i \cf6 BarChart
\f0\i0 \cf4 \cb1 \
\cb3         
\f1\i \cf7 data
\f0\i0 \cf2 =\{\cf4 \{\cb1 \
\cb3           labels\cf2 :\cf4  [\cf5 firstFil\cf4 , \cf8 '\cf9 test\cf8 '\cf4 ],\cb1 \
\cb3           datasets\cf2 :\cf4  [\cb1 \
\cb3             \{\cb1 \
\cb3               data\cf2 :\cf4  [\cb1 \
\cb3                 \cf5 result\cf4 ,\cb1 \
\cb3                 \cf5 50\cf4 ,\cb1 \
\cb3               ]\cb1 \
\cb3             \}\cb1 \
\cb3           ]\cb1 \
\cb3         \}\cf2 \}\cf4 \cb1 \
\cb3         
\f1\i \cf7 width
\f0\i0 \cf2 =\{\cf5 Dimensions\cf4 .\cf7 get\cf4 (\cf8 "\cf9 window\cf8 "\cf4 ).width\cf2 \}\cf4  \cf10 // from react-native\cf4 \cb1 \
\cb3         
\f1\i \cf7 height
\f0\i0 \cf2 =\{\cf5 220\cf2 \}\cf4 \cb1 \
\cb3         
\f1\i \cf7 yAxisLabel
\f0\i0 \cf2 =\cf8 "\cf9 $\cf8 "\cf4 \cb1 \
\cb3         
\f1\i \cf7 yAxisSuffix
\f0\i0 \cf2 =\cf8 "\cf9 k\cf8 "\cf4 \cb1 \
\cb3         
\f1\i \cf7 yAxisInterval
\f0\i0 \cf2 =\{\cf5 1\cf2 \}\cf4  \cf10 // optional, defaults to 1\cf4 \cb1 \
\cb3         
\f1\i \cf7 chartConfig
\f0\i0 \cf2 =\{\cf4 \{\cb1 \
\cb3           backgroundColor\cf2 :\cf4  \cf8 "\cf9 #e26a00\cf8 "\cf4 ,\cb1 \
\cb3           backgroundGradientFrom\cf2 :\cf4  \cf8 "\cf9 #fb8c00\cf8 "\cf4 ,\cb1 \
\cb3           backgroundGradientTo\cf2 :\cf4  \cf8 "\cf9 #ffa726\cf8 "\cf4 ,\cb1 \
\cb3           decimalPlaces\cf2 :\cf4  \cf5 2\cf4 , \cf10 // optional, defaults to 2dp\cf4 \cb1 \
\cb3           \cf7 color\cf2 :\cf4  (
\f1\i \cf12 opacity
\f0\i0 \cf4  \cf2 =\cf4  \cf5 1\cf4 ) \cf2 =>\cf4  \cf9 `rgba(255, 255, 255, \cf2 $\{
\f1\i \cf12 opacity
\f0\i0 \cf2 \}\cf9 )`\cf4 ,\cb1 \
\cb3           \cf7 labelColor\cf2 :\cf4  (
\f1\i \cf12 opacity
\f0\i0 \cf4  \cf2 =\cf4  \cf5 1\cf4 ) \cf2 =>\cf4  \cf9 `rgba(255, 255, 255, \cf2 $\{
\f1\i \cf12 opacity
\f0\i0 \cf2 \}\cf9 )`\cf4 ,\cb1 \
\cb3           style\cf2 :\cf4  \{\cb1 \
\cb3             borderRadius\cf2 :\cf4  \cf5 16\cf4 \cb1 \
\cb3           \},\cb1 \
\cb3           propsForDots\cf2 :\cf4  \{\cb1 \
\cb3             r\cf2 :\cf4  \cf8 "\cf9 6\cf8 "\cf4 ,\cb1 \
\cb3             strokeWidth\cf2 :\cf4  \cf8 "\cf9 2\cf8 "\cf4 ,\cb1 \
\cb3             stroke\cf2 :\cf4  \cf8 "\cf9 #ffa726\cf8 "\cf4 \cb1 \
\cb3           \}\cb1 \
\cb3         \}\cf2 \}\cf4 \cb1 \
\cb3         
\f1\i \cf7 bezier
\f0\i0 \cf4 \cb1 \
\cb3         
\f1\i \cf7 style
\f0\i0 \cf2 =\{\cf4 \{\cb1 \
\cb3           marginVertical\cf2 :\cf4  \cf5 8\cf4 ,\cb1 \
\cb3           borderRadius\cf2 :\cf4  \cf5 16\cf4 \cb1 \
\cb3         \}\cf2 \}\cf4 \cb1 \
\cb3       />\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 console\cf4 .\cf6 log\cf4 (\cf8 '\cf9 Math.round(Math.random()*colors.length)-->\cf8 '\cf4 , \cf5 Math\cf4 .\cf6 round\cf4 (\cf5 Math\cf4 .\cf6 random\cf4 ()\cf2 *\cf5 colors\cf4 .length));\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3       \cf2 let\cf4  color \cf2 =\cf4  \cf5 Math\cf4 .\cf6 round\cf4 (\cf5 Math\cf4 .\cf6 random\cf4 ()\cf2 *\cf5 colors\cf4 .length);\cb1 \
\
\
\cb3     \cf10 // console.log('Math.random(colors.length)-->', Math.round(Math.random()*colors.length));\cf4 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb14 \outl0\strokewidth0 \strokec13     \cf15 \strokec15 // const index = Math.round(Math.random() * colors.length);\cf13 \cb1 \strokec13 \
\
\
\cb14  \cf16 \strokec16 const\cf13 \strokec13  \cf17 \strokec17 hardCoded\cf13 \strokec13  \cf16 \strokec16 =\cf13 \strokec13  [\cb1 \
\cb14     \{\cb1 \
\cb14       name\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 Seoul\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       population\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 21500000\cf13 \strokec13 ,\cb1 \
\cb14       color\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 rgba(131, 167, 234, 1)\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontColor\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #7F7F7F\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontSize\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 15\cf13 \cb1 \strokec13 \
\cb14     \},\cb1 \
\cb14     \{\cb1 \
\cb14       name\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 Toronto\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       population\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 2800000\cf13 \strokec13 ,\cb1 \
\cb14       color\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #F00\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontColor\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #7F7F7F\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontSize\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 15\cf13 \cb1 \strokec13 \
\cb14     \},\cb1 \
\cb14     \{\cb1 \
\cb14       name\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 Beijing\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       population\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 527612\cf13 \strokec13 ,\cb1 \
\cb14       color\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 red\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontColor\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #7F7F7F\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontSize\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 15\cf13 \cb1 \strokec13 \
\cb14     \},\cb1 \
\cb14     \{\cb1 \
\cb14       name\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 New York\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       population\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 8538000\cf13 \strokec13 ,\cb1 \
\cb14       color\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #ffffff\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontColor\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #7F7F7F\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontSize\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 15\cf13 \cb1 \strokec13 \
\cb14     \},\cb1 \
\cb14     \{\cb1 \
\cb14       name\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 Moscow\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       population\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 11920000\cf13 \strokec13 ,\cb1 \
\cb14       color\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 rgb(0, 0, 255)\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontColor\cf16 \strokec16 :\cf13 \strokec13  \cf18 \strokec18 "\cf19 \strokec19 #7F7F7F\cf18 \strokec18 "\cf13 \strokec13 ,\cb1 \
\cb14       legendFontSize\cf16 \strokec16 :\cf13 \strokec13  \cf17 \strokec17 15\cf13 \cb1 \strokec13 \
\cb14     \}\cb1 \
\cb14   ];\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb14  \cf16 \strokec16 const\cf13 \strokec13  \cf20 \strokec20 newObj\cf13 \strokec13  \cf16 \strokec16 =\cf13 \strokec13  (
\f1\i \cf21 \strokec21 arritem
\f0\i0 \cf13 \strokec13 , 
\f1\i \cf21 \strokec21 arramount
\f0\i0 \cf13 \strokec13 , ) \cf16 \strokec16 =>\cf13 \strokec13  \{\cb1 \
\cb14   \cf16 \strokec16 return\cf13 \strokec13  \{\cb1 \
\
\cb14   \}\cb1 \
\cb14  \}\cb1 \
\
\
\
      // const labels = arr.map((el) => \{\
      //   return `$\{months[Number(el.date.split('').slice(5, 7).join(''))]\} & $\{el.amount\}`;\
      // \});\
// for (let i = 0; i < arr.length; i++) \{\
      //   labels2[arr[i].]\
      // \}\
\
      const nonUniqMonths = labels.map((el) => \{\
        const index = el.indexOf('&');\
        return el.slice(0, index - 1);\
      \});\
\
      const uniqMonth = new Set(nonUniqMonths);\
\
      // const cleanData = \{\};\
\
      // for (let i = 0; i < arr.length; i++) \{\
      //   console.log('arr[i]-->', arr[i]);\
      //   if (cleanData[arr[i].])\
      // \}\
\
\
\
      // const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\
      // const data = arr.map((el) => \{\
      //   return Number(el.amount);\
      // \});\
\
      // const data2 = \{\};\
\
      // for (let i = 0; i < arr.length; i++) \{\
      //   if (arr[i][])\
      // \}\
\
      // console.log('data-->', data);}